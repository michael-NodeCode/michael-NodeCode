name: 'Build and Distribute Multi-Platform Binaries'

on:
  push:
    branches:
      - main

jobs:
  create-release:
    permissions:
      contents: write
    runs-on: ubuntu-20.04
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}

    steps:
      - uses: actions/checkout@v3
      - name: setup node
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
      - name: get version
        run: echo "PACKAGE_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV
      - name: create release
        id: create-release
        uses: actions/github-script@v6
        with:
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `app-v${process.env.PACKAGE_VERSION}`,
              name: `Desktop App v${process.env.PACKAGE_VERSION}`,
              body: 'Take a look at the assets to download and install this app.',
              draft: true,
              prerelease: false
            })
            return data.id

  build-tauri:
    needs: create-release
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, windows-latest]

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v3
      - name: setup node
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
      - name: Clean Build Directory
        if: runner.os == 'macOS'
        run: |
          rm -rf src-tauri/target
      - name: Set macOS deployment target
        if: runner.os == 'macOS'
        run: |
          if ! xcode-select -p; then
            xcode-select --install
          else
            echo "Xcode Command Line Tools are already installed"
          fi
          brew install cmake python boost ninja
      - name: Clone and Build KuzuDB on macOS
        if: runner.os == 'macOS'
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          git clone https://${{ secrets.GH_TOKEN }}@github.com/kuzudb/kuzu.git
          cd kuzu
          make release NUM_THREADS=$(sysctl -n hw.physicalcpu)
          # sudo cp build/libkuzu.dylib /usr/local/lib/
      - name: Install CMake and Ninja (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System' -y
          choco install ninja -y
      - name: Set up Visual Studio (Windows)
        if: runner.os == 'Windows'
        shell: bash
        run: |
          rustup default stable
          rustup target add x86_64-pc-windows-msvc
      - name: Clone and Build KuzuDB on Windows
        if: runner.os == 'Windows'
        shell: bash
        env:
          NUMBER_OF_PROCESSORS: ${{ env.NUMBER_OF_PROCESSORS }}
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          git clone https://${{ secrets.GH_TOKEN }}@github.com/kuzudb/kuzu.git
          cd kuzu
          make release NUM_THREADS=$NUMBER_OF_PROCESSORS
          # copy build\\kuzu.dll src-tauri\\target\\release\\
      - name: Find library paths
        id: find_lib_paths
        run: |
          if [[ "$RUNNER_OS" == "macOS" ]]; then
            LIB_PATH=$(find build -name "libkuzu.dylib" | head -n 1)
          elif [[ "$RUNNER_OS" == "Windows" ]]; then
            LIB_PATH=$(find build -name "kuzu.dll" | head -n 1)
          fi
          echo "Library path: $LIB_PATH"
          echo "lib_path=$LIB_PATH" >> $GITHUB_ENV
      - name: Verify Library Path
        run: echo "Library path is ${{ env.lib_path }}"
      - name: Copy library to output directory
        run: |
          if [[ "$RUNNER_OS" == "macOS" ]]; then
            sudo cp ${{ env.lib_path }} /usr/local/lib/
          elif [[ "$RUNNER_OS" == "Windows" ]]; then
            # Adjust path as needed for Windows
            copy ${{ env.lib_path }} src-tauri\\target\\release\\
          fi
      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
      - name: install frontend dependencies
        run: npm install
      - name: Build Application with Kuzu Support
        run: cargo build --release --features kuzu-support
      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          CMAKE_BUILD_TYPE: Release
        with:
          releaseId: ${{ needs.create-release.outputs.release_id }}

  publish-release:
    permissions:
      contents: write
    runs-on: ubuntu-20.04
    needs: [create-release, build-tauri]

    steps:
      - name: publish release
        id: publish-release
        uses: actions/github-script@v6
        env:
          release_id: ${{ needs.create-release.outputs.release_id }}
        with:
          script: |
            github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: process.env.release_id,
              draft: false,
              prerelease: false
            })
