name: 'Build and Distribute Multi-Platform Binaries'

on:
  push:
    branches:
      - main

jobs:
  create-release:
    permissions:
      contents: write
    runs-on: ubuntu-20.04
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}

    steps:
      - uses: actions/checkout@v3
      - name: setup node
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
      - name: get version
        run: echo "PACKAGE_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV
      - name: create release
        id: create-release
        uses: actions/github-script@v6
        with:
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `app-v${process.env.PACKAGE_VERSION}`,
              name: `Desktop App v${process.env.PACKAGE_VERSION}`,
              body: 'Take a look at the assets to download and install this app.',
              draft: true,
              prerelease: false
            })
            return data.id

  build-tauri:
    needs: create-release
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest]

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v3
      - name: setup node
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          
      - name: Clean Build Directory
        if: runner.os == 'macOS'
        run: rm -rf src-tauri/target
      - name: Set up macOS dependencies for Kuzu
        if: runner.os == 'macOS'
        run: |
          brew install cmake python
      - name: Clone and Build KuzuDB on macOS
        if: runner.os == 'macOS'
        run: |
          git clone https://${{ secrets.GH_TOKEN }}@github.com/kuzudb/kuzu.git
          cd kuzu
          make release NUM_THREADS=$(sysctl -n hw.physicalcpu)
          
          sudo find / -name "libkuzu.dylib" 2>/dev/null
          
          if [ -f build/libkuzu.dylib ]; then
            echo "KuzuDB build successful"
            sudo cp build/libkuzu.dylib /usr/local/lib/
          else
            echo "KuzuDB build failed"
          fi

      
      - name: Clean Cargo.toml
        if: runner.os == 'macOS'
        run: |
         rm -rf src-tauri/Cargo.toml
         rm -rf src-tauri/Cargo.lock

      - name: Create new Cargo.toml
        if: runner.os == 'macOS'
        run: |
          echo "
          [package]
          name = \"nodecode\"
          version = \"1.1.0\"
          description = \"nodecode\"
          authors = [\"mstomar\"]
          license = \"\"
          repository = \"nodecodeapp/NodeCodeDesktop\"
          edition = \"2021\"
          rust-version = \"1.77.2\"

          [lib]
          name = \"app_lib\"
          crate-type = [\"staticlib\", \"cdylib\", \"rlib\"]

          [build-dependencies]
          tauri-build = { version = \"2.0.1\", features = [] }

          [dependencies]
          serde_json = \"1.0\"
          serde = { version = \"1.0\", features = [\"derive\"] }
          log = \"0.4\"
          tauri = { version = \"2.0.6\", features = [] }
          tauri-plugin-log = \"2.0.0-rc\"
          tokio = { version = \"1\", features = [\"full\", \"macros\", \"rt-multi-thread\"] }
          kuzu = { version = \"0.6.1\", path = \"/usr/local/lib\" }
          lazy_static = \"1.5.0\"
          tauri-plugin-shell = \"2.0.0\"
          " >> src-tauri/Cargo.toml

          cat src-tauri/Cargo.toml
          

      - name: Install Rust and Build Application with Kuzu
        uses: dtolnay/rust-toolchain@stable
      - name: Install frontend dependencies
        run: npm install

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          CMAKE_BUILD_TYPE: Release
        with:
          releaseId: ${{ needs.create-release.outputs.release_id }}

  publish-release:
    permissions:
      contents: write
    runs-on: ubuntu-20.04
    needs: [create-release, build-tauri]

    steps:
      - name: publish release
        id: publish-release
        uses: actions/github-script@v6
        env:
          release_id: ${{ needs.create-release.outputs.release_id }}
        with:
          script: |
            github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: process.env.release_id,
              draft: false,
              prerelease: false
            })
